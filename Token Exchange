pragma solidity ^0.4.0;

contract Token {
  /// @return total amount of tokens
  function totalSupply() constant returns (uint256 supply) {}
  /// @param _owner The address from which the balance will be retrieved
  /// @return The balance
  function balanceOf(address _owner) constant returns (uint256 balance) {}
  /// @notice send `_value` token to `_to` from `msg.sender`
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transfer(address _to, uint256 _value) returns (bool success) {}
  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
  /// @param _from The address of the sender
  /// @param _to The address of the recipient
  /// @param _value The amount of token to be transferred
  /// @return Whether the transfer was successful or not
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @param _value The amount of wei to be approved for transfer
  /// @return Whether the approval was successful or not
  function approve(address _spender, uint256 _value) returns (bool success) {}
  /// @param _owner The address of the account owning tokens
  /// @param _spender The address of the account able to transfer the tokens
  /// @return Amount of remaining tokens allowed to spent
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
  event Transfer(address indexed _from, address indexed _to, uint256 _value);
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
  uint public decimals;
  string public name;
}

contract TokenExchange {
    
    struct TokenBalance {
        uint numTokens;
        uint price;
    }
    
    mapping (address => uint) etherBalance;
    mapping (address => mapping (address => TokenBalance)) tokenBalances;
    
    modifier ownsTokens(address _owner, address _token) {
        if (tokenBalances[_owner][_token].numTokens == 0) {
            throw;
        }
        _;
    }
    
    function depositToken(address _token, uint _amount) {
        Token token = new Token();
        Token(_token).approve(this, _amount);
        if (!Token(_token).transferFrom(msg.sender, this, _amount)) throw;
        tokenBalances[msg.sender][_token].numTokens += _amount;
    }
    
    function withdrawToken(address _token, uint _amount) {
        
        if (tokenBalances[msg.sender][_token].numTokens < _amount) throw;
        tokenBalances[msg.sender][_token].numTokens -= _amount;
        if(!Token(_token).transfer(msg.sender, _amount)) throw;
        
    }
    
    function getTokenBalance(address _owner, address _token) returns (uint balance) {
        balance = tokenBalances[_owner][_token].numTokens;
        return balance;
    }
    
    function setPrice(address _token, uint _price) {
        if (_price < 0) {
            throw;
        }
        tokenBalances[msg.sender][_token].price = _price;
    }
    
    function buyToken(address _token, address _seller, uint _amount) payable {
        
        if(msg.value == 0 || msg.value < price*_amount) throw;
        if (tokenBalances[msg.sender][_token].price == 0) throw;
        if (tokenBalances[_seller][_token].numTokens < _amount) throw;
        uint price = tokenBalances[msg.sender][_token].price;
        etherBalance[_seller] += _amount*price;
        
        tokenBalances[msg.sender][_token].numTokens += _amount;
        tokenBalances[_seller][_token].numTokens -= _amount;
        if(!msg.sender.send(msg.value - price*_amount)) throw;
    }
    
    function withdrawEther(uint _amount) {
        
        if(etherBalance[msg.sender] < _amount) throw;
        etherBalance[msg.sender] -= _amount;
        if (!msg.sender.send(_amount)) throw;
        
    }
    
}
